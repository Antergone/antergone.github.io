<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[在本地使用Docker搭建ES5.6.1集群]]></title>
      <url>/20171117/%E5%9C%A8%E6%9C%AC%E5%9C%B0%E4%BD%BF%E7%94%A8Docker%E6%90%AD%E5%BB%BAES5.6.1%E9%9B%86%E7%BE%A4.html</url>
      <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name es0 -p 9200:9200 -p 9300:9300 \</span><br><span class="line">-e xpack.security.enabled=<span class="literal">false</span> \</span><br><span class="line">-e xpack.monitoring.enabled=<span class="literal">false</span> \</span><br><span class="line">-e xpack.watcher.enabled=<span class="literal">false</span> \</span><br><span class="line">-e xpack.ml.enabled=<span class="literal">false</span> \</span><br><span class="line">docker.elastic.co/elasticsearch/elasticsearch:5.6.1</span><br><span class="line"></span><br><span class="line">docker run -d --name es1 --link=es0 -p 9201:9200 -p 9301:9300 \</span><br><span class="line">-e xpack.security.enabled=<span class="literal">false</span> \</span><br><span class="line">-e xpack.monitoring.enabled=<span class="literal">false</span> \</span><br><span class="line">-e xpack.watcher.enabled=<span class="literal">false</span> \</span><br><span class="line">-e xpack.ml.enabled=<span class="literal">false</span> \</span><br><span class="line">-e discovery.zen.ping.unicast.hosts=es0:9300 \</span><br><span class="line">docker.elastic.co/elasticsearch/elasticsearch:5.6.1</span><br><span class="line"></span><br><span class="line">docker run -d --name es2 --link=es0 -p 9202:9200 -p 9302:9300 \</span><br><span class="line">-e xpack.security.enabled=<span class="literal">false</span> \</span><br><span class="line">-e xpack.monitoring.enabled=<span class="literal">false</span> \</span><br><span class="line">-e xpack.watcher.enabled=<span class="literal">false</span> \</span><br><span class="line">-e xpack.ml.enabled=<span class="literal">false</span> \</span><br><span class="line">-e discovery.zen.ping.unicast.hosts=es0:9300 \</span><br><span class="line">docker.elastic.co/elasticsearch/elasticsearch:5.6.1</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Docker </category>
            
            <category> 技术杂记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
            <tag> ElasticSearch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ElasticJob动态分片]]></title>
      <url>/20170321/ElasticJob%E5%8A%A8%E6%80%81%E5%88%86%E7%89%87.html</url>
      <content type="html"><![CDATA[<p>在上一次写ElasticJob的文章( <a href="https://www.antergone.com/57.html">https://www.antergone.com/57.html</a> )的时候最后留了一个设想，动态的改变ElasticJob的执行计划，经过测试发现还真有这么一个方法。</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>数据库每天都会进入80 - 100万的数据，需要用ElasticJob做任务调度器将数据转移到HBase。</p>
<h2 id="原有方案"><a href="#原有方案" class="headerlink" title="原有方案"></a>原有方案</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>预估数据量120万<br>注册任务片数 240片<br>下面是SQL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> op_log <span class="keyword">limit</span> [<span class="number">5000</span> * #&#123;shardingNum - <span class="number">1</span>&#125;], <span class="number">5000</span>;</span><br><span class="line">或</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> op_log <span class="keyword">where</span> <span class="keyword">id</span> &gt; [<span class="number">5000</span> * #&#123;shardingNum - <span class="number">1</span>&#125;]  <span class="keyword">and</span> <span class="keyword">id</span> &lt;= [#&#123;shardingNum&#125; * <span class="number">5000</span>];</span><br></pre></td></tr></table></figure>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如果原有数据并没有到120万，那么后面的SQL根本拿不到数据，浪费数据资源。<br>如果id是自增的，上面的两种SQL，第二个SQL可能会好点会命中索引，第一条根本不会命中，到后面就相当于全表扫了，多线程跑，数据库直接就挂了。</p>
<h2 id="动态分片优化后"><a href="#动态分片优化后" class="headerlink" title="动态分片优化后"></a>动态分片优化后</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>在任务执行前10分钟统计出数据库现有数据量</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">id</span>), <span class="keyword">max</span>(<span class="keyword">id</span>) <span class="keyword">from</span> op_log</span><br></pre></td></tr></table></figure>
<p>片数为 [(max - min) / 5000 ] + 1<br>重新动态注册ElasticJob<br>如果原数据不到120万片数一定少于240。根据实际数据算出片数，再结合执行上次文章的线程优化，任务有很大的优化空间。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> op_log <span class="keyword">where</span> <span class="keyword">id</span> &gt; [<span class="number">5000</span> * #&#123;shardingNum - <span class="number">1</span>&#125;]  <span class="keyword">and</span> <span class="keyword">id</span> &lt;= [#&#123;shardingNum&#125; * <span class="number">5000</span>];</span><br></pre></td></tr></table></figure>
<h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><p>任务初始化的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(ElasticJobConfig.class)</span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span>(onConstructor = @__(<span class="meta">@Autowired</span>))</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jobs</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ZookeeperRegistryCenter regCenter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TestJob testJob;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        testJob();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LiteJobConfiguration jobConfig = simpleJobConfigBuilder(<span class="string">"测试任务"</span>,</span><br><span class="line">                testJob.getClass(), <span class="number">1</span>,</span><br><span class="line">                <span class="string">"0/5 * * * * ? "</span>).overwrite(<span class="keyword">true</span>).build();</span><br><span class="line">        <span class="keyword">new</span> SpringJobScheduler(testJob, regCenter, jobConfig).init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LiteJobConfiguration.<span class="function">Builder <span class="title">simpleJobConfigBuilder</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> String jobName,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> Class&lt;? extends SimpleJob&gt; jobClass,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> <span class="keyword">int</span> shardingTotalCount,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> String cron)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LiteJobConfiguration.newBuilder(<span class="keyword">new</span> SimpleJobConfiguration(</span><br><span class="line">                JobCoreConfiguration.newBuilder(jobName, cron, shardingTotalCount).build(), jobClass.getCanonicalName()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重新动态注册的代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">_dynamicTestJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> shardingTotal = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//todo 动态获取数据库数据量</span></span><br><span class="line">    <span class="comment">//todo 算出片数</span></span><br><span class="line">    LiteJobConfiguration jobConfig = simpleJobConfigBuilder(<span class="string">"测试任务"</span>,</span><br><span class="line">            testJob.getClass(), shardingTotal,</span><br><span class="line">            <span class="string">"0/5 * * * * ? "</span>).overwrite(<span class="keyword">true</span>).build();</span><br><span class="line">    <span class="keyword">new</span> SpringJobScheduler(testJob, regCenter, jobConfig).init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里注意：任务名一定不能错, <code>overwrite(true)</code> 一定不能少。 重新注册一遍就会动态啦~<br>执行计划已经可以改变了~</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> 技术杂记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ElasticJob </tag>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 利用Google Authenticator实现ssh登录双因素认证]]></title>
      <url>/20170320/Linux%20%E5%88%A9%E7%94%A8Google%20Authenticator%E5%AE%9E%E7%8E%B0ssh%E7%99%BB%E5%BD%95%E5%8F%8C%E5%9B%A0%E7%B4%A0%E8%AE%A4%E8%AF%81.html</url>
      <content type="html"><![CDATA[<h2 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h2><p>前些天因为工作需要在阿里云弄了一批VPC机器，刚开始是每个人都给了账号密码让其登录控制，又因为各种问题，收回了权限。<br>为了控制登录权限，所以启动了跳板机 （ <a href="http://www.jumpserver.org/" target="_blank" rel="noopener">http://www.jumpserver.org/</a>  ）<br>后来又一个开发开始质疑，VPC其他的机器你可以防火墙禁止外界登录，那你跳板机最该要开一个ssh吧？如果这个机器的账号密码被知道了，那不是GG了<br>好吧，我就想到了这个坑办法。OTP，一次性密码~ 目的让登录的时不仅需要linux的账号密码，还需要一个动态的口令。</p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="手机下载"><a href="#手机下载" class="headerlink" title="手机下载"></a>手机下载</h3><ul>
<li>Google Authenticator</li>
</ul>
<h3 id="安装chrony"><a href="#安装chrony" class="headerlink" title="安装chrony"></a>安装chrony</h3><p>安装这个的原因是因为Google的OTP算法其中有一个因素是时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum install -y chrony</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/chrony.conf</span></span><br><span class="line">server 0.cn.pool.ntp.org</span><br><span class="line">server 1.cn.pool.ntp.org</span><br><span class="line">server 2.cn.pool.ntp.org</span><br><span class="line">server 3.cn.pool.ntp.org</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl restart chronyd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chronyc sources</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install -y git automake libtool pam-devel</span></span><br><span class="line">[root@localhost ~]<span class="comment"># git clone https://github.com/google/google-authenticator-libpam.git</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cd google-authenticator-libpam/</span></span><br><span class="line">[root@localhost google-authenticator-libpam]<span class="comment"># ./bootstrap.sh</span></span><br><span class="line">[root@localhost google-authenticator-libpam]<span class="comment"># ./configure</span></span><br><span class="line">[root@localhost google-authenticator-libpam]<span class="comment"># make &amp;&amp; make install</span></span><br><span class="line">[root@localhost google-authenticator-libpam]<span class="comment"># google-authenticator</span></span><br><span class="line">[root@localhost google-authenticator-libpam]<span class="comment"># cd ~</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/pam.d/sshd</span></span><br><span class="line">auth       required     pam_google_authenticator.so no_increment_hotp</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/ssh/sshd_config</span></span><br><span class="line">asswordAuthentication yes</span><br><span class="line">ChallengeResponseAuthentication yes</span><br><span class="line">UsePAM yes</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl restart sshd </span></span><br><span class="line">[root@localhost ~]<span class="comment"># google-authenticator</span></span><br><span class="line">Do you want authentication tokens to be time-based (y/n) y</span><br><span class="line"><span class="comment">#你想做的认证令牌是基于时间的吗？</span></span><br><span class="line">Warning: pasting the following URL into your browser exposes the OTP secret to Google:</span><br><span class="line">  https://www.google.com/chart?chs=200x200&amp;chld=M|0&amp;cht=qr&amp;chl=otpauth://totp/root@localhost.localdomain%3Fsecret%3DN4HLEJOQHT27VCR6RX66WXB2SY%26issuer%3Dlocalhost.localdomain</span><br><span class="line"></span><br><span class="line">[这里会有一个很大的二维码]</span><br><span class="line"></span><br><span class="line">Your new secret key is: N4HLEJOQHT27VCR6RX66WXB2SY</span><br><span class="line"><span class="comment">#这个key就是加密串，如果你有多个设备，需要把这个保存下，方便以后添加认证设备</span></span><br><span class="line">Your verification code is 299695</span><br><span class="line"><span class="comment">#输入手机上Google Authenticator的code </span></span><br><span class="line">Your emergency scratch codes are:</span><br><span class="line"><span class="comment">#下面这些key是紧急安全码，假如你的手机丢了，紧急登录用的。</span></span><br><span class="line"></span><br><span class="line">  44477086</span><br><span class="line">  92790948</span><br><span class="line">  29251218</span><br><span class="line">  26350870</span><br><span class="line">  30696065</span><br><span class="line"></span><br><span class="line">Do you want me to update your <span class="string">"/root/.google_authenticator"</span> file? (y/n) y</span><br><span class="line"><span class="comment">#你希望我更新你的“/root/.google_authenticator”文件吗(y/n)？</span></span><br><span class="line">Do you want to disallow multiple uses of the same authentication</span><br><span class="line">token? This restricts you to one login about every 30s, but it increases</span><br><span class="line">your chances to notice or even prevent man-in-the-middle attacks (y/n) y</span><br><span class="line"><span class="comment">#你希望禁止多次使用同一个验证令牌吗?这限制你每次登录的时间大约是30秒， 但是这加大了发现或甚至防止中间人攻击的可能性(y/n)?</span></span><br><span class="line">By default, a new token is generated every 30 seconds by the mobile app.</span><br><span class="line">In order to compensate <span class="keyword">for</span> possible time-skew between the client and the server,</span><br><span class="line">we allow an extra token before and after the current time. This allows <span class="keyword">for</span> a</span><br><span class="line">time skew of up to 30 seconds between authentication server and client. If you</span><br><span class="line">experience problems with poor time synchronization, you can increase the window</span><br><span class="line">from its default size of 3 permitted codes (one previous code, the current</span><br><span class="line">code, the next code) to 17 permitted codes (the 8 previous codes, the current</span><br><span class="line">code, and the 8 next codes). This will permit <span class="keyword">for</span> a time skew of up to 4 minutes</span><br><span class="line">between client and server.</span><br><span class="line">Do you want to <span class="keyword">do</span> so? (y/n) y</span><br><span class="line"><span class="comment">#默认情况下，令牌保持30秒有效;为了补偿客户机与服务器之间可能存在的时滞，</span></span><br><span class="line">我们允许在当前时间前后有一个额外令牌。如果你在时间同步方面遇到了问题， 可以增加窗口从默认的3个可通过验证码增加到17个可通过验证码，</span><br><span class="line">这将允许客户机与服务器之间的时差增加到4分钟。你希望这么做吗(y/n)?</span><br><span class="line">If the computer that you are logging into is not hardened against brute-force</span><br><span class="line">login attempts, you can <span class="built_in">enable</span> rate-limiting <span class="keyword">for</span> the authentication module.</span><br><span class="line">By default, this limits attackers to no more than 3 login attempts every 30s.</span><br><span class="line">Do you want to <span class="built_in">enable</span> rate-limiting? (y/n) y</span><br><span class="line"><span class="comment">#如果你登录的那台计算机没有经过固化，以防范运用蛮力的登录企图，可以对验证模块</span></span><br><span class="line">启用尝试次数限制。默认情况下，这限制攻击者每30秒试图登录的次数只有3次。 你希望启用尝试次数限制吗(y/n)?</span><br></pre></td></tr></table></figure>
<h3 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h3><p>注意，第一次登录可能会出现登录失败的情况，查看日志信息显示错误如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># tail -n10 /var/log/secure</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">Dec 31 09:42:46 localhost sshd[2393]: PAM unable to dlopen(/usr/lib64/security/pam_google_authenticator.so): /usr/lib64/security/pam_google_authenticator.so: cannot open shared object file: No such file or directory</span><br><span class="line">Dec 31 09:42:46 localhost sshd[2393]: PAM adding faulty module: /usr/lib64/security/pam_google_authenticator.so</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># ln -sv /usr/local/lib/security/pam_google_authenticator.so /usr/lib64/security/pam_google_authenticator.so</span></span><br><span class="line"><span class="string">"/usr/lib64/security/pam_google_authenticator.so"</span> -&gt; <span class="string">"/usr/local/lib/security/pam_google_authenticator.so"</span></span><br></pre></td></tr></table></figure>
<h3 id="登录方法"><a href="#登录方法" class="headerlink" title="登录方法"></a>登录方法</h3><p>一定要将这个放在第一个！<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oss.antergone.com/blog/2huk7.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
]]></content>
      
        <categories>
            
            <category> DevOps </category>
            
            <category> 技术杂记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Google </tag>
            
            <tag> Linux </tag>
            
            <tag> ssh </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot中使用ElasticJob]]></title>
      <url>/20170317/SpringBoot%E4%B8%AD%E4%BD%BF%E7%94%A8ElasticJob.html</url>
      <content type="html"><![CDATA[<p>去年十一月份给Elastic Job提了一个PR( <a href="https://github.com/dangdangdotcom/elastic-job/pull/181" target="_blank" rel="noopener">https://github.com/dangdangdotcom/elastic-job/pull/181</a>  )，使SpringBoot可以直接使用注解将ElasticJob跑起来。<br>用了一段时间，在这里也写出一个简短的小记录。</p>
<h2 id="ElasticJob版本"><a href="#ElasticJob版本" class="headerlink" title="ElasticJob版本"></a>ElasticJob版本</h2><p>Version  <code>2.0.3及以上</code></p>
<h2 id="创建Zookeeper注册中心"><a href="#创建Zookeeper注册中心" class="headerlink" title="创建Zookeeper注册中心"></a>创建Zookeeper注册中心</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"com.antergone.ejob"</span>)</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"com.antergone.ejob"</span>, name = <span class="string">"enabled"</span>, havingValue = <span class="string">"true"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticJobConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String zkNodes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String namespace;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZookeeperConfiguration <span class="title">zkConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZookeeperConfiguration(zkNodes, namespace);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZookeeperRegistryCenter <span class="title">regCenter</span><span class="params">(ZookeeperConfiguration config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZookeeperRegistryCenter(config);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="定义任务"><a href="#定义任务" class="headerlink" title="定义任务"></a>定义任务</h2><p>定义任务也比较简单，方法也比较多。前期我是直接把每个任务都做成一个Bean（代码段1），后来看了源码发现这个实例只需要init向zk注册一下任务信息，所以就换用了第二种方式（代码段2）。</p>
<p>代码段1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(JobConfig.class)</span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span>(onConstructor = @__(<span class="meta">@Autowired</span>))</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticJobs</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ZookeeperRegistryCenter regCenter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SampleJob sampleJob;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SampleJobListener sampleJobListener;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> SpringJobScheduler <span class="title">sampleJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LiteJobConfiguration jobConfig = LiteJobConfiguration.newBuilder(<span class="keyword">new</span> SimpleJobConfiguration(</span><br><span class="line">                JobCoreConfiguration.newBuilder(<span class="string">"Sample Job"</span>, <span class="string">"0 0 22 * * ? "</span>, <span class="number">5</span>).build(),</span><br><span class="line">                SampleJob.class.getCanonicalName())).overwrite(<span class="keyword">true</span>).build();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringJobScheduler(sampleJob, regCenter, jobConfig, sampleJobListener).init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码段2：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(JobConfig.class)</span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span>(onConstructor = @__(<span class="meta">@Autowired</span>))</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticJobs</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ZookeeperRegistryCenter regCenter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SampleJob sampleJob;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SampleJobListener sampleJobListener;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        _sampleJob();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">_sampleJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LiteJobConfiguration jobConfig = LiteJobConfiguration.newBuilder(<span class="keyword">new</span> SimpleJobConfiguration(</span><br><span class="line">                JobCoreConfiguration.newBuilder(<span class="string">"Sample Job"</span>, <span class="string">"0 0 22 * * ? "</span>, <span class="number">5</span>).build(),</span><br><span class="line">                SampleJob.class.getCanonicalName())).overwrite(<span class="keyword">true</span>).build();</span><br><span class="line">        <span class="keyword">new</span> SpringJobScheduler(sampleJob, regCenter, jobConfig, sampleJobListener).init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="修改任务执行线程池"><a href="#修改任务执行线程池" class="headerlink" title="修改任务执行线程池"></a>修改任务执行线程池</h2><h3 id="定义Handler"><a href="#定义Handler" class="headerlink" title="定义Handler"></a>定义Handler</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleJobHandler</span> <span class="keyword">implements</span> <span class="title">ExecutorServiceHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SampleJobHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ExecutorService <span class="title">createExecutorService</span><span class="params">(String jobName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExecutorManager.SAMPLE_JOB_EXECUTOR;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="任务定义时带入"><a href="#任务定义时带入" class="headerlink" title="任务定义时带入"></a>任务定义时带入</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">_sampleJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LiteJobConfiguration jobConfig = LiteJobConfiguration.newBuilder(<span class="keyword">new</span> SimpleJobConfiguration(</span><br><span class="line">            JobCoreConfiguration.newBuilder(<span class="string">"Sample Job"</span>, <span class="string">"0 0 22 * * ? "</span>, <span class="number">5</span>)</span><br><span class="line">                    .jobProperties(<span class="string">"executor_service_handler"</span>, ExecutorManager.SAMPLE_JOB_EXECUTOR).build(),</span><br><span class="line">            SampleJob.class.getCanonicalName())).overwrite(<span class="keyword">true</span>).build();</span><br><span class="line">    <span class="keyword">new</span> SpringJobScheduler(sampleJob, regCenter, jobConfig, sampleJobListener).init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就可以控制每个任务执行节点上的线程池。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>用了一段时间的ElasticJob，官方API都是使用原有的XML进行配置。之前有跟一个开发者聊过，他们甚至没有考虑过做SpringBoot的尝试。SpringBoot上使用ElasticJob还有很多坑没有踩，还需要更多更多的实践和探究。我上面的demo也只能说可以用，并没有做什么优化和创新。</p>
<h2 id="设想"><a href="#设想" class="headerlink" title="设想"></a>设想</h2><p>ElasticJob官方API中讲述的XML配置和我上述说的bean初始化的方式，都是项目在初始化启动的时候将任务信息注册到zk的，在执行中是无法改变的。<br>那我们常有一类定时任务，比如做每个用户的统计，用户是一个增量数据，如果我们每片的数量是100， 那么随着用户数量的增长，片数也要动态的增长。<br>现在很多的解决方案都是预估未来的量，但这并不靠谱。我们能否可以在每天任务执行前一段时间先统计出所有的用户数，然后覆盖原有任务的信息。<br>最近我也在研究这个东西，不知道是否可实现，有好方法的小伙伴可以pm我哦~</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> 技术杂记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ElasticJob </tag>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker使用Calico自定义网络]]></title>
      <url>/20170316/Docker%E4%BD%BF%E7%94%A8Calico%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E7%BB%9C.html</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>略~  技术博客不扯没用的，show U my code ~</p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul>
<li>calico版本: v1.0.2</li>
<li>docker版本: v1.13.1 </li>
</ul>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># calico 的release地址 https://github.com/projectcalico/calicoctl/releases</span></span><br><span class="line">wget https://github.com/projectcalico/calicoctl/releases/download/v1.0.2/calicoctl</span><br></pre></td></tr></table></figure>
<h3 id="准备ETCD"><a href="#准备ETCD" class="headerlink" title="准备ETCD"></a>准备ETCD</h3><p>提示: <code>这里只是简单的做一个可用的，建议做集群。</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y etcd</span><br><span class="line">nohup etcd -listen-peer-urls http://10.10.10.10:2380 -listen-client-urls http://10.10.10.10:2379,http://127.0.0.1:2379 -advertise-client-urls http://10.10.10.10:2379   &amp;</span><br></pre></td></tr></table></figure>
<h3 id="配置docker"><a href="#配置docker" class="headerlink" title="配置docker"></a>配置docker</h3><p>添加如下配置, 如果没有这个文件，就新建~</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="string">"cluster-store"</span>: <span class="string">"etcd://10.10.10.10:2379/calico"</span>,</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置calico"><a href="#配置calico" class="headerlink" title="配置calico"></a>配置calico</h3><p>这里注意下，calico新版的命令都变了。 下面的操作都是在一台机器上处理就可以了，不需要每台机器都处理</p>
<h4 id="将当前主机加入calico"><a href="#将当前主机加入calico" class="headerlink" title="将当前主机加入calico"></a>将当前主机加入calico</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">calicoctl node run --ip=10.10.10.10</span><br></pre></td></tr></table></figure>
<p>注意: <code>每个机器都要加入，并且写自己的IP</code> 这里下载需要从docker hub上下载一个node镜像，所以有点慢，可以使用镜像仓库</p>
<p>所有机器执行成功之后可以看当前的节点情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@izuf61ygoynhba5hbyzuv0z ~]<span class="comment"># calicoctl node status</span></span><br><span class="line">Calico process is running.</span><br><span class="line"></span><br><span class="line">IPv4 BGP status</span><br><span class="line">+--------------+-------------------+-------+------------+-------------+</span><br><span class="line">| PEER ADDRESS |     PEER TYPE     | STATE |   SINCE    |    INFO     |</span><br><span class="line">+--------------+-------------------+-------+------------+-------------+</span><br><span class="line">| 10.10.10.13  | node-to-node mesh | up    | 2017-03-13 | Established |</span><br><span class="line">| 10.10.10.11  | node-to-node mesh | up    | 2017-03-13 | Established |</span><br><span class="line">| 10.10.10.12  | node-to-node mesh | up    | 2017-03-13 | Established |</span><br><span class="line">| 10.10.10.15  | node-to-node mesh | up    | 2017-03-13 | Established |</span><br><span class="line">| 10.10.10.16  | node-to-node mesh | up    | 2017-03-13 | Established |</span><br><span class="line">| 10.10.10.14  | node-to-node mesh | up    | 2017-03-13 | Established |</span><br><span class="line">+--------------+-------------------+-------+------------+-------------+</span><br><span class="line"></span><br><span class="line">IPv6 BGP status</span><br><span class="line">No IPv6 peers found.</span><br></pre></td></tr></table></figure>
<h4 id="查看calico的ip池"><a href="#查看calico的ip池" class="headerlink" title="查看calico的ip池"></a>查看calico的ip池</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@izuf61ygoynhba5hbyzuv0z ~]<span class="comment"># calicoctl get ippool -o wide</span></span><br><span class="line">CIDR                       NAT     IPIP</span><br><span class="line">192.168.0.0/16           <span class="literal">true</span>    <span class="literal">false</span></span><br><span class="line">10.9.10.0/24               <span class="literal">true</span>    <span class="literal">true</span>    </span><br><span class="line">fd80:24e2:f998:72d6::/64   <span class="literal">false</span>   <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h4 id="删除calico默认的网络-非必要步骤"><a href="#删除calico默认的网络-非必要步骤" class="headerlink" title="删除calico默认的网络(非必要步骤)"></a>删除calico默认的网络(非必要步骤)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">calicoctl delete ippool 192.168.0.0/16</span><br></pre></td></tr></table></figure>
<p>注意:  这里不是必须要执行的，因为192.168.0.0是我们常用的内网IP, calico默认的网络直接掩掉了我们16位，会造成这个网段网络访问失败，所以删掉这个</p>
<h4 id="创建calico自定义网络"><a href="#创建calico自定义网络" class="headerlink" title="创建calico自定义网络"></a>创建calico自定义网络</h4><p>不使用IPIP的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; EOF | calicoctl create -f -</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ipPool</span><br><span class="line">metadata:</span><br><span class="line">  cidr: 10.8.10.0/24</span><br><span class="line">spec:</span><br><span class="line">  ipip:</span><br><span class="line">    enabled: <span class="literal">false</span></span><br><span class="line">  nat-outgoing: <span class="literal">true</span></span><br><span class="line">  disabled: <span class="literal">false</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>使用IPIP的:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; EOF | calicoctl create -f -</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ipPool</span><br><span class="line">metadata:</span><br><span class="line">  cidr: 10.9.10.0/24</span><br><span class="line">spec:</span><br><span class="line">  ipip:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">  nat-outgoing: <span class="literal">true</span></span><br><span class="line">  disabled: <span class="literal">false</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>注意: 因为我的网络环境问题 下面的例子我都是以使用<code>IPIP</code>的配置。添加之后可以用上面的查看命令检查一下。</p>
<h4 id="docker创建calico网络"><a href="#docker创建calico网络" class="headerlink" title="docker创建calico网络"></a>docker创建calico网络</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create --driver=calico --ipam-driver=calico-ipam --subnet=10.9.10.0/24 calico</span><br></pre></td></tr></table></figure>
<p>注意: 很多网上的资料ipam的名字都是calico，那是老版本的，<code>新版本的是calico-ipam</code>。<br>操作之后可以在不同的机器上检查一下，应该都有calico这个网络才对，而且network id应该一致。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@izuf61ygoynhba5hbyzuv0z ~]<span class="comment"># docker network ls </span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">c854966102fa        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">0cd8c3dc5cd1        calico              calico              global</span><br><span class="line">a3cf99e3d5fc        host                host                <span class="built_in">local</span></span><br><span class="line">ee3030094cd6        none                null                <span class="built_in">local</span></span><br></pre></td></tr></table></figure>
<h4 id="配置calico的网络权限"><a href="#配置calico的网络权限" class="headerlink" title="配置calico的网络权限"></a>配置calico的网络权限</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; EOF | calicoctl apply -f -</span><br><span class="line">- apiVersion: v1</span><br><span class="line">  kind: profile</span><br><span class="line">  metadata:</span><br><span class="line">    name: calico</span><br><span class="line">    tags:</span><br><span class="line">    - calico</span><br><span class="line">  spec:</span><br><span class="line">    egress:</span><br><span class="line">    - action: allow</span><br><span class="line">      destination: &#123;&#125;</span><br><span class="line">      <span class="built_in">source</span>: &#123;&#125;</span><br><span class="line">    ingress:</span><br><span class="line">    - action: allow</span><br><span class="line">      destination: &#123;&#125;</span><br><span class="line">      <span class="built_in">source</span>: &#123;&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h3 id="Try-It"><a href="#Try-It" class="headerlink" title="Try It"></a>Try It</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --net=calico --name=nginx nginx</span><br></pre></td></tr></table></figure>
<p>现在可以用 <code>docker inspect</code>命令看下容器的网络   也可以ping一下~</p>
<h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 查看Calico的Profile</span></span><br><span class="line">calicoctl get profile -o yaml</span><br><span class="line"><span class="comment"># 2. 查看Calico当前网络情况</span></span><br><span class="line">calicoctl get workloadEndpoint -o wide</span><br><span class="line"><span class="comment"># 3. 删除IP池</span></span><br><span class="line">calicoctl delete ippool CIDR</span><br><span class="line"><span class="comment"># 4. 删除策略配置  </span></span><br><span class="line">calicoctl delete profile profile_name</span><br></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>calico的官方API: <a href="http://docs.projectcalico.org/v2.0/reference/" target="_blank" rel="noopener">http://docs.projectcalico.org/v2.0/reference/</a></li>
<li>calico v1.0的文章 《Ucloud云上环境使用calico+libnetwork连通容器网络实践》<a href="https://zhuanlan.zhihu.com/p/24094454" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/24094454</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[修改Docker0的IP地址]]></title>
      <url>/20170302/%E4%BF%AE%E6%94%B9Docker0%E7%9A%84IP%E5%9C%B0%E5%9D%80.html</url>
      <content type="html"><![CDATA[<p>Docker默认使用的网桥 <code>docker0</code> 的网段是 <code>172.17.0.1</code>，正好和公司网络冲突。</p>
<p>网上的资料也一如既往的狗血，在这里记录下自己的配置。</p>
<p>以下步骤自测过得版本: <code>1.12.x</code>, <code>1.13.1</code><br>其他版本，如果有需要可以自行测试，应该差不太多。</p>
<h3 id="第一步-删除原有配置"><a href="#第一步-删除原有配置" class="headerlink" title="第一步 删除原有配置"></a>第一步 删除原有配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service docker stop</span><br><span class="line">sudo ip link <span class="built_in">set</span> dev docker0 down</span><br><span class="line">sudo brctl delbr docker0</span><br><span class="line">sudo iptables -t nat -F POSTROUTING</span><br></pre></td></tr></table></figure>
<h3 id="第二步-创建新的网桥"><a href="#第二步-创建新的网桥" class="headerlink" title="第二步 创建新的网桥"></a>第二步 创建新的网桥</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo brctl addbr docker0</span><br><span class="line">sudo ip addr add 192.168.200.1/24 dev docker0</span><br><span class="line">sudo ip link <span class="built_in">set</span> dev docker0 up</span><br></pre></td></tr></table></figure>
<h3 id="第三步-配置Docker的文件"><a href="#第三步-配置Docker的文件" class="headerlink" title="第三步 配置Docker的文件"></a>第三步 配置Docker的文件</h3><p>注意： 这里是 <code>增加下面的配置</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">"bip"</span>: <span class="string">"192.168.200.1/24"</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>docker的配置现在都是用<code>daemon.json</code>了，不需要去设置<code>DOCKER_OPTS</code>, 所以网络上很多的资料早已过时。</p>
<p>关于daemon.json可以看我之前的文章   <a href="https://www.antergone.com/42.html">https://www.antergone.com/42.html</a></p>
<h3 id="第四步-重启主机"><a href="#第四步-重启主机" class="headerlink" title="第四步 重启主机"></a>第四步 重启主机</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Docker </category>
            
            <category> 技术杂记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker如何安装镜像仓库]]></title>
      <url>/20170226/Docker%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.html</url>
      <content type="html"><![CDATA[<p>Docker仓库搭建，其实不是个很难的事情，其实就是跑一个官方的镜像。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull registry</span><br><span class="line">mkdir -p /data/docker-registry</span><br><span class="line">docker run -d -p 5000:5000 --restart=always --name registry -v /data/docker-registry/:/var/lib/registry/ registry</span><br></pre></td></tr></table></figure>
<p>但是这里有一个小坑，网上的文档也都是老的。<br>仓库搭建完，docker打好image往仓库推的时候会报下面的错误：</p>
<blockquote>
<p>Get <a href="https://10.46.18.93:5000/v1/_ping" target="_blank" rel="noopener">https://10.46.18.93:5000/v1/_ping</a>: http: server gave HTTP response to HTTPS client  </p>
</blockquote>
<p>这个错是什么意思呢？  说白了就是没有证书。所以这个时候如果我们手头没有证书，或者做验证性试验的时候，就需要信任这个地址。</p>
<p>新版本的Docker配置方式是：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 添加仓库地址到 insecure-registries</span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    "live-restore": true,</span><br><span class="line">    "insecure-registries":["10.46.18.93:5000"]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>附：daemon.json的全配置项</p>
]]></content>
      
        <categories>
            
            <category> Docker </category>
            
            <category> 技术杂记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker配置文件 daemon.json全配置项]]></title>
      <url>/20170219/Docker%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%20daemon.json%E5%85%A8%E9%85%8D%E7%BD%AE%E9%A1%B9.html</url>
      <content type="html"><![CDATA[<p>截至当前(2017年2月19日)，Docker daemon.json的全配置如下：</p>
<h2 id="Linux版本"><a href="#Linux版本" class="headerlink" title="Linux版本:"></a>Linux版本:</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">    <span class="string">"api-cors-header"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"authorization-plugins"</span>: [],</span><br><span class="line">    <span class="string">"bip"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"bridge"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"cgroup-parent"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"cluster-store"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"cluster-store-opts"</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">"cluster-advertise"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"debug"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"default-gateway"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"default-gateway-v6"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"default-runtime"</span>: <span class="string">"runc"</span>,</span><br><span class="line">    <span class="string">"default-ulimits"</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">"disable-legacy-registry"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"dns"</span>: [],</span><br><span class="line">    <span class="string">"dns-opts"</span>: [],</span><br><span class="line">    <span class="string">"dns-search"</span>: [],</span><br><span class="line">    <span class="string">"exec-opts"</span>: [],</span><br><span class="line">    <span class="string">"exec-root"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"fixed-cidr"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"fixed-cidr-v6"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"graph"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"group"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [],</span><br><span class="line">    <span class="string">"icc"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"insecure-registries"</span>: [],</span><br><span class="line">    <span class="string">"ip"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="string">"iptables"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"ipv6"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"ip-forward"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"ip-masq"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"labels"</span>: [],</span><br><span class="line">    <span class="string">"live-restore"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"log-driver"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"log-level"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"log-opts"</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">"max-concurrent-downloads"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">"max-concurrent-uploads"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">"mtu"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"oom-score-adjust"</span>: <span class="number">-500</span>,</span><br><span class="line">    <span class="string">"pidfile"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"raw-logs"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"registry-mirrors"</span>: [],</span><br><span class="line">    <span class="string">"runtimes"</span>: &#123;</span><br><span class="line">        <span class="string">"runc"</span>: &#123;</span><br><span class="line">            <span class="string">"path"</span>: <span class="string">"runc"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"custom"</span>: &#123;</span><br><span class="line">            <span class="string">"path"</span>: <span class="string">"/usr/local/bin/my-runc-replacement"</span>,</span><br><span class="line">            <span class="string">"runtimeArgs"</span>: [</span><br><span class="line">                <span class="string">"--debug"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"selinux-enabled"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"storage-driver"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"storage-opts"</span>: [],</span><br><span class="line">    <span class="string">"swarm-default-advertise-addr"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"tls"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"tlscacert"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"tlscert"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"tlskey"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"tlsverify"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"userland-proxy"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"userns-remap"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Windows版本"><a href="#Windows版本" class="headerlink" title="Windows版本"></a>Windows版本</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"authorization-plugins"</span>: [],</span><br><span class="line">    <span class="string">"bridge"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"cluster-advertise"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"cluster-store"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"debug"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"default-ulimits"</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">"disable-legacy-registry"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"dns"</span>: [],</span><br><span class="line">    <span class="string">"dns-opts"</span>: [],</span><br><span class="line">    <span class="string">"dns-search"</span>: [],</span><br><span class="line">    <span class="string">"exec-opts"</span>: [],</span><br><span class="line">    <span class="string">"fixed-cidr"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"graph"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"group"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [],</span><br><span class="line">    <span class="string">"insecure-registries"</span>: [],</span><br><span class="line">    <span class="string">"labels"</span>: [],</span><br><span class="line">    <span class="string">"live-restore"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"log-driver"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"log-level"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"mtu"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"pidfile"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"raw-logs"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"registry-mirrors"</span>: [],</span><br><span class="line">    <span class="string">"storage-driver"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"storage-opts"</span>: [],</span><br><span class="line">    <span class="string">"swarm-default-advertise-addr"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"tlscacert"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"tlscert"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"tlskey"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"tlsverify"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Docker </category>
            
            <category> 技术杂记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[Java] Retrofit2.0 如何进行GBK编码]]></title>
      <url>/20161222/%5BJava%5D%20Retrofit2.0%20%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8CGBK%E7%BC%96%E7%A0%81.html</url>
      <content type="html"><![CDATA[<p>对Retrofit + OkHttp还不熟悉的人可以点传送门，先看下这两个东西的使用。</p>
<ul>
<li>Retrofit: <a href="https://github.com/square/retrofit" target="_blank" rel="noopener">https://github.com/square/retrofit</a></li>
<li>OkHttp: <a href="https://github.com/square/okhttp" target="_blank" rel="noopener">https://github.com/square/okhttp</a></li>
</ul>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>接口文档要求Post请求，字段使用GBK编码<br>我们先按照Retrofit的规范和接口文档来写接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@POST</span>(SEND_API_URL)</span><br><span class="line"><span class="meta">@FormUrlEncoded</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Call&lt;SendResponse&gt; <span class="title">send</span><span class="params">(@FieldMap Map&lt;String, Object&gt; bodyMap)</span></span>;</span><br></pre></td></tr></table></figure>
<p>Retrofit 默认情况下是使用UTF-8编码，其实就是调用的OkHttp3的编码规则。我们来看下OkHttp是怎么做的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下代码摘自okhttp3.HttpUrl</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">canonicalize</span><span class="params">(String input, <span class="keyword">int</span> pos, <span class="keyword">int</span> limit, String encodeSet, <span class="keyword">boolean</span> alreadyEncoded, <span class="keyword">boolean</span> strict, <span class="keyword">boolean</span> plusIsSpace, <span class="keyword">boolean</span> asciiOnly)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> codePoint;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = pos; i &lt; limit; i += Character.charCount(codePoint)) &#123;</span><br><span class="line">       codePoint = input.codePointAt(i);</span><br><span class="line">       <span class="keyword">if</span>(codePoint &lt; <span class="number">32</span> || codePoint == <span class="number">127</span> || codePoint &gt;= <span class="number">128</span> &amp;&amp; asciiOnly || encodeSet.indexOf(codePoint) != -<span class="number">1</span> || codePoint == <span class="number">37</span> &amp;&amp; (!alreadyEncoded || strict &amp;&amp; !percentEncoded(input, i, limit)) || codePoint == <span class="number">43</span> &amp;&amp; plusIsSpace) &#123;</span><br><span class="line">           Buffer out = <span class="keyword">new</span> Buffer();</span><br><span class="line">           out.writeUtf8(input, pos, i);</span><br><span class="line">           canonicalize(out, input, i, limit, encodeSet, alreadyEncoded, strict, plusIsSpace, asciiOnly);</span><br><span class="line">           <span class="keyword">return</span> out.readUtf8();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> input.substring(pos, limit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很多文章说，给他设置一个Content-Type，也就是带上Header，在做请求的时候，确实会去解析，但是对于编码来说，其实并没有什么用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Headers</span>(<span class="string">"Content-Type: application/x-www-form-urlencoded;charset=GBK"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@POST</span>(SEND_API_URL)</span><br><span class="line"><span class="meta">@FormUrlEncoded</span></span><br><span class="line"><span class="meta">@Headers</span>(<span class="string">"Content-Type: application/x-www-form-urlencoded;charset=GBK"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Call&lt;SendResponse&gt; <span class="title">send</span><span class="params">(@FieldMap(encoded = <span class="keyword">true</span>)</span> Map&lt;String, Object&gt; bodyMap)</span>;</span><br></pre></td></tr></table></figure>
<p>在 <code>@FieldMap</code> 注解里面设置 <code>encoded = true</code><br>这样做的意思就是，这个Map里面的东西我已经做过编码转换，不需要框架去重新转了。 也就是上面的代码中<code>alreadyEncoded = true</code><br>但是这里也要注意，在调用这个方法的时候，传入的Map要自己转码。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最近在对接第三方接口，真的是千奇百怪，吐槽一天都吐槽不完。<br>作为开发人员，我觉得写对外的接口一定要注意，这个接口是给对方开发人员用的，至少编码、格式、参数加密、鉴权等等都要统一。<br>本是同根生相煎何太急 : )</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> 技术杂记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> OkHttp </tag>
            
            <tag> Retrofit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[Cracked] Burpsuite V1.7.11 破解版]]></title>
      <url>/20161217/%5BCracked%5D%20Burpsuite%20V1.7.11.html</url>
      <content type="html"><![CDATA[<p>之前的版本貌似都集体失效了，这个版本是目前可以用的，刚测试了下。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oss.antergone.com/blog/lwj33.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p>中国红客联盟 =&gt; <code>https://ssl.ihonker.org/tools/burpsuite1.7.11.zip</code></p>
]]></content>
      
        <categories>
            
            <category> 实用工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tools </tag>
            
            <tag> Hacker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[Cracked]Navicat Premium for Mac 11.2.13 破解版]]></title>
      <url>/20161217/%5BCracked%5DNavicat%20Premium%20for%20Mac%2011.2.13.html</url>
      <content type="html"><![CDATA[<p>Navicat的简介就不多说了，直接上地址下载可用，亲测！</p>
<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址:"></a>下载地址:</h2><p>链接:  <code>https://pan.baidu.com/s/1qY0aYwG</code><br>密码: <code>1m6a</code></p>
]]></content>
      
        <categories>
            
            <category> 实用工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac </tag>
            
            <tag> SQL </tag>
            
            <tag> Tools </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[categories]]></title>
      <url>/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[读书]]></title>
      <url>/reading/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于]]></title>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<p>大家好，我是XXX。欢迎来到我的个人技术博客。</p>
<p>这里用markdown写下你的简介，就跟平时写md一样就可以了。</p>
]]></content>
    </entry>
    
  
</search>
